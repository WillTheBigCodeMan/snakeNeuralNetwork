//thresholds continuing

class node {
  constructor(ins, outs, unc, bias, _weights, rangeM, thresh) {
    this.weights = [];
    this.o = outs;
    this.b = bias;
    if (unc != null) {
      for (let i = 0; i < ins; i++) {
        this.weights.push(Math.random() * unc - (unc / 2));
      }
      console.log(this.weights);
    } 
    this.t = [];
    if (rangeM == null) {
      rangeM = 3;
    }
    for (let i = 0; i < outs; i++) {
      this.t.push(i * rangeM);
    }
  }
  calcOut(inps) {
    let tot = 0;
    for (let i = 0; i < this.weights.length; i++) {
      tot += inps[i] * this.weights[i];
    }
    tot += this.b;
    if (tot < this.t[0]) {
      return [0, tot];
    }
    for (let i = 0; i < this.t.length; i++) {
      if (tot > this.t[i] && tot < this.t[i + 1]) {
        return [i, tot];
      }
    }
    return [this.t.length - 1, tot];
  }
  mutate(r) {
    for (let i = 0; i < this.weights.length; i++) {
      this.weights[i] += Math.random() * r - r / 2;
    }
  }
  reinforce(m) {}
  punish(m) {}
  av() {
    let tot = 0;
    for (let i = 0; i < this.weights.length; i++) {
      tot += this.weights[i];
    }
    tot = tot / this.weights.length;
    return tot;
  }
  train(ins, out,m) {
    let c = this.calcOut(ins);
    if (c[1] != out) {
      let loss = (c[1] - out)*(c[1] - out);
    }
  }
}

///////////////////////////////////////////////////////////////////////////

class nn {
  constructor(inps, _nodes, lvls, outs, unc, nArr) {
    this.nodes = [];
    this.o = outs;
    if (nArr == null) {
      for (let i = 0; i < lvls; i++) {
        this.nodes.push([]);
        for (let j = 0; j < _nodes; j++) {
          if (i == 0) {
            this.nodes[i].push(new node(inps, _nodes, unc, 0, null, 3));
          } else if (i == lvls - 1) {
            this.nodes[i].push(new node(_nodes, outs, unc, 0, null, 3));
          } else {
            this.nodes[i].push(new node(_nodes, _nodes, unc, 0, null, 3));
          }
        }
      }
    } else {
      this.nodes = nArr;
    }
  }
  out(inps) {
    let cOut = inps;
    let cInps = inps;
    for (let i = 0; i < this.nodes.length; i++) {
      cInps = cOut;
      let outs = [];
      for (let j = 0; j < this.nodes[i].length; j++) {
        outs.push(this.nodes[i][j].calcOut(cInps));
      }
      cOut = outs;
    }
    let cS = [];
    for (let i = 0; i < this.o; i++) {
      cS.push(0);
    }
    for (let i = 0; i < cOut.length; i++) {
      cS[cOut[i]]++;
    }
    let max = 0;
    let output = 0;
    for (let i = 0; i < cS.length; i++) {
      if (cS[i] > max) {
        max = cS[i];
        output = i;
      }
    }
    return output;
  }
  train(n) {
    for (let i = 0; i < this.nodes.length; i++) {
      for (let j = 0; j < this.nodes[i].length; j++) {
        this.nodes[i][j].mutate(n);
      }
    }
  }
}

///////////////////////////////////////////////////////

let w = 12;
let h = 12;
let apple = [Math.floor(w / 2) + 2, Math.floor(h / 2)];
let snake = [
  [Math.floor(w / 2), Math.floor(h / 2)],
  [Math.floor(w / 2) - 1, Math.floor(h / 2)],
  [Math.floor(w / 2) - 2, Math.floor(h / 2)],
  [Math.floor(w / 2) - 3, Math.floor(h / 2)],
];
let dir = [1, 0];
let s = 4;
let t = Date.now();
let d = 0;
let dTot = 0;
let nD = [0, 0];
let tD = [
  [-2, 0, 1, 0, 0, 1, 0, 0],
  [-1, 0, 1, 0, 0, 1, 0, 0],
  [2, -4, 1, 0, 0, 1, 0, 0],
  [3, -4, 1, 0, 0, 1, 0, 0],
  [4, -4, 1, 0, 0, 1, 0, 0],
  [5, -4, 1, 0, 0, 1, 0, 0],
  [5, -3, 0, 1, 0, 1, 0, 1],
  [5, -2, 0, 1, 0, 1, 0, 1],
  [5, -1, 0, 1, 0, 1, 0, 1],
  [5, 0, 0, 1, 0, 0, 0, 1],
  [4, 0, -1, 0, 1, 0, 0, 1],
  [3, 0, -1, 0, 1, 0, 0, 1],
  [2, 0, -1, 0, 1, 0, 0, 1],
  [1, 0, -1, 0, 1, 0, 0, 0],
  [-3, 4, -1, 0, 1, 0, 0, 0],
  [-4, 4, -1, 0, 1, 0, 0, 0],
  [-5, 4, -1, 0, 1, 0, 0, 0],
  [-5, 3, 0, -1, 1, 0, 1, 0],
  [-5, 2, 0, -1, 1, 0, 1, 0],
  [-5, 1, 0, -1, 1, 0, 1, 0],
  [-5, 0, 0, -1, 1, 0, 1, 0],
  [-4, 0, 1, 0, 0, 1, 1, 0],
  [-3, 0, 1, 0, 0, 1, 1, 0],
  [-2, 0, 1, 0, 0, 1, 1, 0],
  [-1, 0, 1, 0, 0, 1, 1, 0],
  [-1, 0, 1, 0, 0, 1, 0, 0],
  [-1, -1, 0, -1, 0, 1, 1, 0],
  [-1, -2, 0, -1, 0, 1, 1, 0],
  [-1, -3, 0, -1, 0, 1, 1, 0],
  [0, -3, 1, 0, 0, 1, 1, 0],
  [0, -2, 0, 1, 0, 1, 1, 1],
  [0, -1, 0, 1, 0, 1, 1, 1],
  [8, -2, 0, 1, 0, 1, 0, 1],
  [8, -1, 0, 1, 0, 1, 0, 1],
  [8, 0, 0, 1, 0, 1, 0, 1],
  [7, 0, -1, 0, 1, 0, 0, 1],
  [6, 0, -1, 0, 1, 0, 0, 1],
  [5, 0, -1, 0, 1, 0, 0, 1],
  [4, 0, -1, 0, 1, 0, 0, 1],
  [3, 0, -1, 0, 1, 0, 0, 1],
  [2, 0, -1, 0, 1, 0, 0, 1],
  [1, 0, -1, 0, 1, 0, 0, 0],
  [-5, 6, -1, 0, 1, 0, 0, 0],
  [-5, 5, 0, -1, 1, 0, 1, 0],
  [-5, 4, 0, -1, 1, 0, 1, 0],
  [-5, 3, 0, -1, 1, 0, 1, 0],
  [-5, 2, 0, -1, 1, 0, 1, 0],
  [-5, 1, 0, -1, 1, 0, 1, 0],
  [-5, 0, 0, -1, 1, 0, 1, 0],
  [-4, 0, 1, 0, 0, 1, 1, 0],
  [-3, 0, 1, 0, 0, 1, 1, 0],
  [-2, 0, 1, 0, 0, 1, 1, 0],
  [-1, 0, 1, 0, 0, 1, 1, 0],
  [3, 1, 1, 0, 0, 1, 1, 0],
  [4, 1, 1, 0, 0, 1, 1, 0],
  [5, 1, 1, 0, 0, 1, 1, 0],
  [6, 1, 1, 0, 0, 1, 1, 0],
  [6, 0, 0, -1, 0, 1, 1, 0],
  [5, 0, -1, 0, 1, 1, 1, 0],
  [4, 0, -1, 0, 1, 1, 1, 0],
  [3, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 0, 1, 0],
  [1, 0, -1, 0, 1, 0, 1, 0],
  [-3, -9, -1, 0, 1, 0, 1, 0],
  [-4, -9, -1, 0, 1, 0, 1, 0],
  [-4, -8, 0, 1, 1, 0, 0, 1],
  [-4, -7, 0, 1, 1, 0, 0, 1],
  [-4, -6, 0, 1, 1, 0, 0, 1],
  [-4, -5, 0, 1, 1, 0, 0, 1],
  [-4, -4, 0, 1, 1, 0, 0, 1],
  [-4, -3, 0, 1, 1, 0, 0, 1],
  [-4, -2, 0, 1, 1, 0, 0, 1],
  [-4, -1, 0, 1, 1, 0, 0, 1],
  [-3, -1, 1, 0, 0, 1, 0, 1],
  [-2, -1, 1, 0, 0, 1, 0, 1],
  [-1, -1, 1, 0, 0, 1, 0, 1],
  [-1, 0, 0, 1, 0, 1, 0, 1],
  [-3, 2, 1, 0, 0, 1, 0, 1],
  [-2, 2, 1, 0, 0, 1, 0, 1],
  [-1, 2, 1, 0, 0, 1, 0, 1],
  [0, 2, 1, 0, 0, 1, 0, 1],
  [0, 1, 0, -1, 0, 1, 1, 1],
  [4, 8, 0, -1, 0, 1, 1, 0],
  [4, 7, 0, -1, 0, 1, 1, 0],
  [4, 6, 0, -1, 0, 1, 1, 0],
  [4, 5, 0, -1, 0, 1, 1, 0],
  [4, 4, 0, -1, 0, 1, 1, 0],
  [4, 3, 0, -1, 0, 1, 1, 0],
  [4, 2, 0, -1, 0, 1, 1, 0],
  [4, 1, 0, -1, 0, 1, 1, 0],
  [3, 1, -1, 0, 1, 1, 1, 0],
  [2, 1, -1, 0, 1, 0, 1, 0],
  [1, 1, -1, 0, 1, 0, 1, 0],
  [0, 1, -1, 0, 1, 0, 1, 0],
  [-1, 1, -1, 0, 1, 0, 1, 0],
  [-2, 1, -1, 0, 1, 0, 1, 0],
  [-3, 1, -1, 0, 1, 0, 1, 0],
  [-3, 0, 0, -1, 1, 0, 1, 0],
  [-2, 0, 1, 0, 1, 1, 1, 0],
  [-1, 0, 1, 0, 1, 1, 1, 0],
  [0, -2, 1, 0, 1, 1, 1, 1],
  [1, -2, 1, 0, 1, 1, 1, 0],
  [2, -2, 1, 0, 1, 1, 1, 0],
  [3, -2, 1, 0, 0, 1, 1, 0],
  [4, -2, 1, 0, 0, 1, 1, 0],
  [4, -1, 0, 1, 0, 1, 0, 1],
  [4, 0, 0, 1, 0, 1, 0, 1],
  [3, 0, -1, 0, 1, 1, 0, 1],
  [2, 0, -1, 0, 1, 1, 0, 1],
  [1, 0, -1, 0, 1, 1, 0, 1],
  [4, -8, -1, 0, 1, 1, 0, 1],
  [3, -8, -1, 0, 1, 1, 0, 1],
  [2, -8, -1, 0, 1, 0, 0, 1],
  [1, -8, -1, 0, 1, 0, 0, 1],
  [0, -8, -1, 0, 1, 0, 0, 1],
  [0, -7, 0, 1, 1, 0, 0, 1],
  [0, -6, 0, 1, 1, 0, 0, 1],
  [0, -5, 0, 1, 1, 0, 0, 1],
  [0, -4, 0, 1, 1, 0, 0, 1],
  [0, -3, 0, 1, 1, 0, 0, 1],
  [0, -2, 0, 1, 1, 0, 0, 1],
  [0, -1, 0, 1, 1, 0, 0, 1],
  [-7, 6, 0, 1, 1, 0, 0, 1],
  [-6, 6, 1, 0, 1, 1, 0, 1],
  [-5, 6, 1, 0, 1, 1, 0, 1],
  [-4, 6, 1, 0, 1, 1, 0, 1],
  [-3, 6, 1, 0, 0, 1, 0, 1],
  [-2, 6, 1, 0, 0, 1, 0, 1],
  [-1, 6, 1, 0, 0, 1, 0, 1],
  [0, 6, 1, 0, 0, 1, 0, 1],
  [0, 5, 0, -1, 0, 1, 1, 1],
  [0, 4, 0, -1, 0, 1, 1, 1],
  [0, 3, 0, -1, 0, 1, 1, 1],
  [0, 2, 0, -1, 0, 1, 1, 0],
  [0, 1, 0, -1, 0, 1, 1, 0],
  [5, -3, 0, -1, 0, 1, 1, 0],
  [5, -4, 0, -1, 0, 1, 1, 0],
  [5, -5, 0, -1, 0, 1, 1, 0],
  [4, -5, -1, 0, 1, 1, 1, 0],
  [3, -5, -1, 0, 1, 1, 1, 0],
  [2, -5, -1, 0, 1, 1, 1, 0],
  [1, -5, -1, 0, 1, 0, 1, 0],
  [0, -5, -1, 0, 1, 0, 1, 0],
  [0, -4, 0, 1, 1, 0, 1, 1],
  [0, -3, 0, 1, 1, 0, 1, 1],
  [0, -2, 0, 1, 1, 0, 1, 1],
  [0, -1, 0, 1, 1, 0, 1, 1],
  [-1, -3, 0, 1, 1, 0, 1, 1],
  [-2, -3, -1, 0, 1, 0, 1, 1],
  [-3, -3, -1, 0, 1, 0, 0, 1],
  [-3, -2, 0, 1, 1, 0, 0, 1],
  [-3, -1, 0, 1, 1, 0, 0, 1],
  [-3, 0, 0, 1, 1, 0, 0, 1],
  [-2, 0, 1, 0, 1, 1, 0, 1],
  [-1, 0, 1, 0, 1, 1, 0, 1],
  [-6, 5, 1, 0, 1, 1, 0, 1],
  [-5, 5, 1, 0, 1, 1, 0, 1],
  [-4, 5, 1, 0, 0, 1, 0, 1],
  [-3, 5, 1, 0, 0, 1, 0, 1],
  [-2, 5, 1, 0, 0, 1, 0, 1],
  [-1, 5, 1, 0, 0, 1, 0, 1],
  [0, 5, 1, 0, 0, 1, 0, 1],
  [0, 4, 0, -1, 0, 1, 1, 1],
  [0, 3, 0, -1, 0, 1, 1, 1],
  [0, 2, 0, -1, 0, 1, 1, 1],
  [0, 1, 0, -1, 0, 1, 1, 0],
  [6, 3, 0, -1, 0, 1, 1, 0],
  [6, 2, 0, -1, 0, 1, 1, 0],
  [6, 1, 0, -1, 0, 1, 1, 0],
  [5, 1, -1, 0, 1, 1, 1, 0],
  [4, 1, -1, 0, 1, 1, 1, 0],
  [4, 0, 0, -1, 1, 1, 1, 0],
  [3, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 1, 1, 0],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [-1, -3, -1, 0, 1, 0, 1, 0],
  [-2, -3, -1, 0, 1, 0, 1, 0],
  [-3, -3, -1, 0, 1, 0, 1, 0],
  [-3, -2, 0, 1, 1, 0, 1, 1],
  [-3, -1, 0, 1, 1, 0, 1, 1],
  [-3, 0, 0, 1, 1, 0, 1, 1],
  [-2, 0, 1, 0, 1, 1, 1, 1],
  [-1, 0, 1, 0, 1, 1, 1, 1],
  [5, 5, 1, 0, 1, 1, 1, 1],
  [6, 5, 1, 0, 1, 1, 1, 1],
  [6, 6, 0, 1, 1, 1, 1, 1],
  [6, 7, 0, 1, 1, 1, 0, 1],
  [5, 7, -1, 0, 1, 1, 0, 1],
  [4, 7, -1, 0, 1, 1, 0, 1],
  [3, 7, -1, 0, 1, 1, 0, 1],
  [2, 7, -1, 0, 1, 0, 0, 1],
  [1, 7, -1, 0, 1, 0, 0, 1],
  [1, 6, 0, -1, 1, 0, 1, 1],
  [1, 5, 0, -1, 1, 0, 1, 1],
  [1, 4, 0, -1, 1, 0, 1, 1],
  [1, 3, 0, -1, 1, 0, 1, 1],
  [0, 3, -1, 0, 1, 0, 1, 1],
  [0, 2, 0, -1, 1, 0, 1, 0],
  [0, 1, 0, -1, 1, 0, 1, 0],
  [-1, -1, 0, -1, 1, 0, 1, 1],
  [0, -1, 1, 0, 1, 1, 1, 0],
  [1, -1, 1, 0, 1, 1, 1, 0],
  [2, -1, 1, 0, 1, 1, 1, 0],
  [3, -1, 1, 0, 1, 1, 1, 0],
  [4, -1, 1, 0, 1, 1, 1, 0],
  [5, -1, 1, 0, 0, 1, 1, 0],
  [6, -1, 1, 0, 0, 1, 1, 0],
  [7, -1, 1, 0, 0, 1, 1, 0],
  [7, 0, 0, 1, 0, 1, 1, 1],
  [6, 0, -1, 0, 1, 1, 1, 1],
  [5, 0, -1, 0, 1, 1, 1, 1],
  [4, 0, -1, 0, 1, 1, 1, 1],
  [3, 0, -1, 0, 1, 1, 1, 1],
  [2, 0, -1, 0, 1, 1, 1, 1],
  [1, 0, -1, 0, 1, 1, 1, 1],
  [1, 1, 0, 1, 1, 1, 1, 1],
  [1, 2, 0, 1, 1, 1, 1, 1],
  [1, 3, 0, 1, 1, 1, 0, 1],
  [1, 4, 0, 1, 1, 1, 0, 1],
  [1, 5, 0, 1, 1, 1, 0, 1],
  [1, 6, 0, 1, 1, 1, 0, 1],
  [0, 6, -1, 0, 1, 1, 0, 1],
  [0, 5, 0, -1, 1, 0, 1, 1],
  [0, 4, 0, -1, 1, 0, 1, 1],
  [0, 3, 0, -1, 1, 0, 1, 1],
  [0, 2, 0, -1, 1, 0, 1, 1],
  [0, 1, 0, -1, 1, 0, 1, 1],
  [1, -6, 0, -1, 1, 0, 1, 1],
  [0, -6, -1, 0, 1, 0, 1, 1],
  [0, -5, 0, 1, 1, 0, 1, 1],
  [0, -4, 0, 1, 1, 0, 1, 1],
  [0, -3, 0, 1, 1, 0, 1, 1],
  [0, -2, 0, 1, 1, 0, 1, 1],
  [0, -1, 0, 1, 1, 0, 1, 1],
  [-10, 0, 0, 1, 1, 0, 0, 1],
  [-10, 1, 0, 1, 1, 0, 0, 1],
  [-9, 1, 1, 0, 1, 1, 0, 1],
  [-8, 1, 1, 0, 1, 1, 0, 1],
  [-7, 1, 1, 0, 0, 1, 0, 1],
  [-6, 1, 1, 0, 0, 1, 0, 1],
  [-5, 1, 1, 0, 0, 1, 0, 1],
  [-4, 1, 1, 0, 0, 1, 0, 1],
  [-3, 1, 1, 0, 0, 1, 0, 1],
  [-2, 1, 1, 0, 0, 1, 0, 1],
  [-1, 1, 1, 0, 0, 1, 0, 1],
  [0, 1, 1, 0, 0, 1, 0, 1],
  [5, 7, 0, -1, 0, 1, 1, 1],
  [5, 6, 0, -1, 0, 1, 1, 1],
  [5, 5, 0, -1, 0, 1, 1, 1],
  [5, 4, 0, -1, 0, 1, 1, 1],
  [5, 3, 0, -1, 0, 1, 1, 1],
  [5, 2, 0, -1, 0, 1, 1, 1],
  [5, 1, 0, -1, 0, 1, 1, 0],
  [5, 0, 0, -1, 0, 1, 1, 0],
  [4, 0, -1, 0, 1, 1, 1, 0],
  [3, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 1, 1, 0],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [5, -9, -1, 0, 1, 1, 1, 1],
  [4, -9, -1, 0, 1, 1, 1, 0],
  [3, -9, -1, 0, 1, 1, 1, 0],
  [2, -9, -1, 0, 1, 1, 1, 0],
  [1, -9, -1, 0, 1, 0, 1, 0],
  [0, -9, -1, 0, 1, 0, 1, 0],
  [0, -8, 0, 1, 1, 0, 1, 1],
  [0, -7, 0, 1, 1, 0, 1, 1],
  [0, -6, 0, 1, 1, 0, 1, 1],
  [0, -5, 0, 1, 1, 0, 1, 1],
  [0, -4, 0, 1, 1, 0, 1, 1],
  [0, -3, 0, 1, 1, 0, 1, 1],
  [0, -2, 0, 1, 1, 0, 1, 1],
  [0, -1, 0, 1, 1, 0, 0, 1],
  [-7, 3, 0, 1, 1, 0, 0, 1],
  [-7, 4, 0, 1, 1, 0, 0, 1],
  [-6, 4, 1, 0, 1, 1, 0, 1],
  [-5, 4, 1, 0, 1, 1, 0, 1],
  [-4, 4, 1, 0, 1, 1, 0, 1],
  [-3, 4, 1, 0, 1, 1, 0, 1],
  [-2, 4, 1, 0, 1, 1, 0, 1],
  [-1, 4, 1, 0, 1, 1, 0, 1],
  [0, 4, 1, 0, 1, 1, 0, 1],
  [0, 3, 0, -1, 1, 1, 1, 1],
  [0, 2, 0, -1, 1, 1, 1, 1],
  [0, 1, 0, -1, 0, 1, 1, 1],
  [6, 5, 0, -1, 0, 1, 1, 1],
  [6, 4, 0, -1, 0, 1, 1, 1],
  [6, 3, 0, -1, 0, 1, 1, 1],
  [6, 2, 0, -1, 0, 1, 1, 1],
  [6, 1, 0, -1, 0, 1, 1, 1],
  [6, 0, 0, -1, 0, 1, 1, 1],
  [5, 0, -1, 0, 1, 1, 1, 1],
  [4, 0, -1, 0, 1, 1, 1, 1],
  [3, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 1, 1, 0],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [-3, -4, -1, 0, 1, 1, 1, 0],
  [-4, -4, -1, 0, 1, 0, 1, 0],
  [-4, -3, 0, 1, 1, 0, 1, 1],
  [-4, -2, 0, 1, 1, 0, 1, 1],
  [-4, -1, 0, 1, 1, 0, 1, 1],
  [-3, -1, 1, 0, 1, 1, 1, 1],
  [-2, -1, 1, 0, 1, 1, 1, 1],
  [-1, -1, 1, 0, 1, 1, 1, 1],
  [0, -1, 1, 0, 1, 1, 1, 1],
  [1, 5, 0, 1, 1, 1, 1, 1],
  [0, 5, -1, 0, 1, 1, 1, 1],
  [-1, 5, -1, 0, 1, 1, 1, 1],
  [-2, 5, -1, 0, 1, 1, 1, 1],
  [-3, 5, -1, 0, 1, 0, 1, 1],
  [-3, 6, 0, 1, 1, 0, 1, 1],
  [-2, 6, 1, 0, 1, 1, 1, 1],
  [-1, 6, 1, 0, 1, 1, 1, 1],
  [0, 6, 1, 0, 1, 1, 1, 1],
  [1, 6, 1, 0, 1, 1, 1, 1],
  [2, 6, 1, 0, 1, 1, 0, 1],
  [3, 6, 1, 0, 1, 1, 0, 1],
  [3, 7, 0, 1, 1, 1, 0, 1],
  [3, 8, 0, 1, 1, 1, 0, 1],
  [4, 8, 1, 0, 0, 1, 0, 1],
  [4, 7, 0, -1, 0, 1, 1, 1],
  [4, 6, 0, -1, 0, 1, 1, 1],
  [4, 5, 0, -1, 0, 1, 1, 1],
  [4, 4, 0, -1, 0, 1, 1, 1],
  [4, 3, 0, -1, 0, 1, 1, 1],
  [4, 2, 0, -1, 0, 1, 1, 1],
  [4, 1, 0, -1, 0, 1, 1, 0],
  [4, 0, 0, -1, 0, 1, 1, 0],
  [3, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 1, 1, 0],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [2, 0, -1, 0, 1, 1, 1, 1],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [-7, -2, -1, 0, 1, 1, 1, 1],
  [-8, -2, -1, 0, 1, 0, 1, 0],
  [-9, -2, -1, 0, 1, 0, 1, 0],
  [-9, -1, 0, 1, 1, 0, 1, 1],
  [-9, 0, 0, 1, 1, 0, 1, 1],
  [-9, 1, 0, 1, 1, 0, 1, 1],
  [-9, 2, 0, 1, 1, 0, 1, 1],
  [-9, 3, 0, 1, 1, 0, 1, 1],
  [-9, 4, 0, 1, 1, 0, 1, 1],
  [-9, 5, 0, 1, 1, 0, 1, 1],
  [-9, 6, 0, 1, 1, 0, 0, 1],
  [-9, 7, 0, 1, 1, 0, 0, 1],
  [-8, 7, 1, 0, 1, 1, 0, 1],
  [-7, 7, 1, 0, 1, 1, 0, 1],
  [-6, 7, 1, 0, 1, 1, 0, 1],
  [-5, 7, 1, 0, 1, 1, 0, 1],
  [-4, 7, 1, 0, 1, 1, 0, 1],
  [-3, 7, 1, 0, 1, 1, 0, 1],
  [-2, 7, 1, 0, 1, 1, 0, 1],
  [-1, 7, 1, 0, 0, 1, 0, 1],
  [0, 7, 1, 0, 0, 1, 0, 1],
  [0, 6, 0, -1, 0, 1, 1, 1],
  [0, 5, 0, -1, 0, 1, 1, 1],
  [0, 4, 0, -1, 0, 1, 1, 1],
  [0, 3, 0, -1, 0, 1, 1, 1],
  [0, 2, 0, -1, 0, 1, 1, 1],
  [0, 1, 0, -1, 0, 1, 1, 1],
  [4, -1, 0, -1, 0, 1, 1, 1],
  [4, -2, 0, -1, 0, 1, 1, 1],
  [5, -2, 1, 0, 0, 1, 1, 1],
  [5, -1, 0, 1, 0, 1, 1, 1],
  [5, 0, 0, 1, 0, 1, 1, 1],
  [5, 1, 0, 1, 0, 1, 1, 1],
  [5, 2, 0, 1, 0, 1, 1, 1],
  [5, 3, 0, 1, 0, 1, 1, 1],
  [5, 4, 0, 1, 0, 1, 1, 1],
  [5, 5, 0, 1, 0, 1, 1, 1],
  [5, 6, 0, 1, 0, 1, 0, 1],
  [6, 6, 1, 0, 0, 1, 0, 1],
  [6, 5, 0, -1, 0, 1, 1, 1],
  [6, 4, 0, -1, 0, 1, 1, 1],
  [6, 3, 0, -1, 0, 1, 1, 1],
  [6, 2, 0, -1, 0, 1, 1, 1],
  [6, 1, 0, -1, 0, 1, 1, 1],
  [6, 0, 0, -1, 0, 1, 1, 1],
  [6, -1, 0, -1, 0, 1, 1, 1],
  [-2, 0, 1, 0, 0, 1, 0, 0],
  [-1, 0, 1, 0, 0, 1, 0, 0],
  [0, 1, 1, 0, 0, 1, 0, 0],
  [1, 1, 1, 0, 0, 1, 0, 0],
  [2, 1, 1, 0, 0, 1, 0, 0],
  [2, 0, 0, -1, 0, 1, 1, 0],
  [1, 0, -1, 0, 1, 1, 1, 0],
  [1, 0, -1, 0, 1, 0, 1, 0],
  [5, -3, -1, 0, 1, 0, 1, 0],
  [4, -3, -1, 0, 1, 0, 1, 0],
  [3, -3, -1, 0, 1, 0, 1, 0],
];
let tA = [
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  3,
  3,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  4,
  4,
  4,
  4,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  1,
  3,
  3,
  3,
  3,
  3,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  4,
  4,
  4,
  4,
  4,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  2,
  2,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  3,
  3,
  2,
  2,
  2,
  2,
  2,
  4,
  4,
  4,
  4,
  2,
  4,
  4,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  2,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  3,
  2,
  2,
  2,
  2,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  1,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  1,
  1,
  1,
  1,
  4,
  2,
  2,
  2,
  2,
  2,
  2,
];
let perceptron = new node(8, 4, 4, 0);

function setup() {
  createCanvas(400, 400);
  console.log(perceptron);
  for(let i = 0; i < tA.length; i ++){
    perceptron.train(tD[i], (tA[i] * 3) - 1.5, 0.01);
  }
  console.log(perceptron);
}

function draw() {
  d = Date.now() - t;
  t = Date.now();
  dTot += d;
  if (dTot > 1000 / s) {
    dTot -= 1000 / s;
    background(0);
    let xPObs = 0;
    let xNObs = 0;
    let yPObs = 0;
    let yNObs = 0;
    for (let i = 1; i < snake.length; i++) {
      if (snake[i][0] == snake[0][0] + 1) {
        xPObs = 1;
      }
      if (snake[i][0] == snake[0][0] - 1) {
        xNObs = 1;
      }
      if (snake[i][1] == snake[0][1] + 1) {
        yPObs = 1;
      }
      if (snake[i][1] == snake[0][1] - 1) {
        yNObs = 1;
      }
    }
    tD.push([
      snake[0][0] - apple[0],
      snake[0][1] - apple[1],
      dir[0],
      dir[1],
      xPObs,
      xNObs,
      yPObs,
      yNObs,
    ]);
    tA.push(nD);
    let aIout = perceptron.calcOut([
      snake[0][0] - apple[0],
      snake[0][1] - apple[1],
      dir[0],
      dir[1],
      xPObs,
      xNObs,
      yPObs,
      yNObs
    ]);
    switch(aIout[0]){
      case 0:
        nD = [1,0];
        break;
      case 1:
        nD = [-1,0];
        break;
      case 2:
        nD = [0,1];
        break
      case 3:
        nD = [0,-1];
        break;
    }
    if (!(nD[0] + dir[0] == 0 || nD[1] + dir[1] == 0)) {
      dir = nD;
    }
    fill(255, 0, 0);
    rect(
      (apple[0] * width) / w,
      (apple[1] * height) / h,
      width / w,
      height / h
    );
    fill(0, 255, 0);
    if (!(dir[0] == 0 && dir[1] == 0)) {
      for (let i = snake.length - 1; i > 0; i--) {
        snake[i][0] = snake[i - 1][0];
        snake[i][1] = snake[i - 1][1];
      }
      snake[0][0] += dir[0];
      snake[0][1] += dir[1];
    }
    for (let i = 0; i < snake.length; i++) {
      rect(
        (snake[i][0] * width) / w,
        (snake[i][1] * height) / h,
        width / w,
        height / h
      );
    }
    if (snake[0][0] == apple[0] && snake[0][1] == apple[1]) {
      snake.push([-1, -1]);
      while (true) {
        apple = [Math.floor(Math.random() * w), Math.floor(Math.random() * h)];
        let val = true;
        for (let i = 0; i < snake.length; i++) {
          if (snake[i][0] == apple[0] && snake[i][1] == apple[1]) {
            val = false;
            break;
          }
        }
        if (val) {
          break;
        }
      }
    }
    if (
      snake[0][0] >= w ||
      snake[0][0] < 0 ||
      snake[0][1] >= h ||
      snake[0][1] < 0
    ) {
      resett();
    }
    for (let i = 2; i < snake.length; i++) {
      if (snake[0][0] == snake[i][0] && snake[0][1] == snake[i][1]) {
        resett();
      }
    }
  }
}

function keyPressed() {
  switch (keyCode) {
    case UP_ARROW:
      nD = [0, -1];
      break;
    case DOWN_ARROW:
      nD = [0, 1];
      break;
    case LEFT_ARROW:
      nD = [-1, 0];
      break;
    case RIGHT_ARROW:
      nD = [1, 0];
      break;
  }
  if (key == "l") {
    let tDout = "";
    for (let i = 0; i < tD.length; i++) {
      tDout += "[";
      for (let j = 0; j < tD[i].length; j++) {
        tDout += str(tD[i][j]) + ",";
      }
      tDout += "],";
    }
    console.log(tDout);
    let tAout = "";
    for (let i = 0; i < tA.length; i++) {
      tAout += "[" + str(tA[i]) + "], ";
    }
    console.log(tAout);
  }
}

function resett() {
  tD.splice(tD.length - 1, 1);
  tA.splice(tA.length - 1, 1);
  snake = [
    [Math.floor(w / 2), Math.floor(h / 2)],
    [Math.floor(w / 2) - 1, Math.floor(h / 2)],
    [Math.floor(w / 2) - 2, Math.floor(h / 2)],
    [Math.floor(w / 2) - 3, Math.floor(h / 2)],
  ];
  dir = [1, 0];
  nD = [0, 0];
  apple = [Math.floor(w / 2) + 2, Math.floor(h / 2)];
}

/////////////////////////////////////////////
